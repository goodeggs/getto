// Generated by CoffeeScript 1.7.1
(function() {
  var get, getto, isObject, pathFn, wrapFunction;

  pathFn = function(obj, path) {
    var part, _i, _len, _ref;
    _ref = path.split('.');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      part = _ref[_i];
      if ((obj == null) || typeof obj !== 'object') {
        return obj;
      }
      obj = obj[part];
    }
    return obj;
  };

  isObject = function(value) {
    if (value == null) {
      return false;
    }
    if (typeof value !== 'object') {
      return false;
    }
    return value.constructor === Object;
  };

  wrapFunction = function(func) {
    return function(options) {
      var key, value;
      if (arguments.length > 1 || typeof options !== 'object') {
        throw new Error("You can only getto functions that take a single options argument");
      }
      for (key in options) {
        value = options[key];
        if (typeof value === 'object' && !value.get) {
          options[key] = getto(value);
        }
      }
      return func(options);
    };
  };

  get = function(path) {
    var item, value, _i, _len;
    value = pathFn(this, path);
    if (isObject(value)) {
      getto(value);
    }
    if (Array.isArray(value)) {
      for (_i = 0, _len = value.length; _i < _len; _i++) {
        item = value[_i];
        if (isObject(item)) {
          getto(item);
        }
      }
    }
    return value;
  };

  get.getto = true;

  module.exports = getto = function(obj) {
    var _ref;
    if (typeof obj === 'function') {
      return wrapFunction(obj);
    }
    if (obj == null) {
      return obj;
    }
    if (!isObject(obj)) {
      throw new Error('Not an Object');
    }
    if ((_ref = obj.get) != null ? _ref.getto : void 0) {
      return obj;
    }
    if (obj.get != null) {
      throw new Error("'get' is already defined");
    }
    Object.defineProperty(obj, 'get', {
      value: get,
      enumerable: false
    });
    return obj;
  };

}).call(this);
